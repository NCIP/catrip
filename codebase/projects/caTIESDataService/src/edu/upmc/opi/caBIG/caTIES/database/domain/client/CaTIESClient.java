/*L
 * Copyright Duke Comprehensive Cancer Center
 *
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/catrip/LICENSE.txt for details.
 */

package edu.upmc.opi.caBIG.caTIES.database.domain.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream; 
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import edu.upmc.opi.caBIG.caTIES.database.domain.stubs.CaTIESPortType;
import edu.upmc.opi.caBIG.caTIES.database.domain.stubs.service.CaTIESServiceAddressingLocator;
import edu.upmc.opi.caBIG.caTIES.database.domain.common.CaTIESI;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;


/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class CaTIESClient extends ServiceSecurityClient implements CaTIESI {	
	protected CaTIESPortType portType;
	private Object portTypeMutex;

	public CaTIESClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CaTIESClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public CaTIESClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CaTIESClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private CaTIESPortType createPortType() throws RemoteException {

		CaTIESServiceAddressingLocator locator = new CaTIESServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		CaTIESPortType port = null;
		try {
			port = locator.getCaTIESPortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	
	public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
		return portType.getResourceProperty(resourcePropertyQName);
	}

	public static void usage(){
		System.out.println(CaTIESClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){  
		int count = 1;
	    System.out.println("Running the Grid Service Client");
//	    String wsdd = "C:\\catrip\\catrip\\codebase\\projects\\caTIESDataService\\src\\edu\\upmc\\opi\\caBIG\\caTIES\\database\\domain\\client\\client-config.wsdd";
	    String wsdd = "src/edu/upmc/opi/caBIG/caTIES/database/domain/client/client-config.wsdd";
		try{
			CaTIESClient client = new CaTIESClient("http://localhost:8181/wsrf/services/cagrid/CaTIES");
			CQLQuery cqlQuery = new CQLQuery();

			gov.nih.nci.cagrid.cqlquery.Object target = new gov.nih.nci.cagrid.cqlquery.Object();
			target.setName("edu.upmc.opi.caBIG.caTIES.database.domain.IdentifiedPatient");
			cqlQuery.setTarget(target);
			CQLQueryResults results = client.query(cqlQuery);
			CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results, new FileInputStream(new File(wsdd)));
			while (iter.hasNext()) {
				Object o = iter.next();
				edu.upmc.opi.caBIG.caTIES.database.domain.IdentifiedPatient de = (edu.upmc.opi.caBIG.caTIES.database.domain.IdentifiedPatient) o;
				if (de == null)
					System.out.println("object is null");
				else{
					System.out.println("*******  Identified Patient " + (count++) +"  *******");
					System.out.println(" id : " + de.getId());
					System.out.println(" version : " + de.getVersion());
					System.out.println(" uuid : " + de.getUuid());
					System.out.println(" deidentifiedid : " + de.getDeidentifiedId());
					System.out.println(" mrn : " + de.getMedicalRecordNumber());
					System.out.println(" first : " + de.getFirstName());
					System.out.println(" last : " + de.getLastName());
					System.out.println(" middle : " + de.getMiddleName());
					System.out.println(" birthdate : " + de.getBirthDate());
					System.out.println(" ssn : " + de.getSocialSecurityNumber());
					System.out.println(" gender : " + de.getGender());
					System.out.println(" race : " + de.getRace());
					System.out.println(" ethinicity : " + de.getEthnicity());
					System.out.println(" marital status : " + de.getMaritalStatus());
				}
			}
			if (results != null && results.getObjectResult() != null)
				System.out.println( " Returned Result Count :  " + results.getObjectResult().length);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }
	public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"query");
        gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
        gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
        cqlQueryContainer.setCQLQuery(cqlQuery);
        params.setCqlQuery(cqlQueryContainer);
        gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
        return boxedResult.getCQLQueryResultCollection();
      }
    }

}
