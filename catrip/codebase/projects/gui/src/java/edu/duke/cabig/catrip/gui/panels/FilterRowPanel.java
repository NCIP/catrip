/*
 * FilterRowPanel.java
 *
 * Created on August 22, 2006, 3:30 PM
 */

package edu.duke.cabig.catrip.gui.panels;

import edu.duke.cabig.catrip.gui.common.AttributeBean;
import edu.duke.cabig.catrip.gui.common.ClassBean;
import edu.duke.cabig.catrip.gui.discovery.DomainModelMetaDataRegistry;
import edu.duke.cabig.catrip.gui.simplegui.objectgraph.GraphAssociation;
import edu.duke.cabig.catrip.gui.simplegui.objectgraph.GraphObject;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextField;

/**
 *
 * @author  Sanjeev Agarwal
 */
public class FilterRowPanel extends javax.swing.JPanel {
    
    
    
    /** Creates new form FilterRowPanel */
    public FilterRowPanel() {
        initComponents();
        init();
    }
    
    private void init(){
        
        fillPredicateCombo();
        
//        fillCdeCombo1();
        
    }
    
    
    public JTextField getValueBox(){
        return valueTextBox;
    }
    
    public javax.swing.JComboBox getCdeCombo() {
        return cdeCombo;
    }
    
    public javax.swing.JComboBox getPredicateCombo() {
        return predicateCombo;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        cdeCombo = new javax.swing.JComboBox();
        cdeCombo = new edu.duke.cabig.catrip.gui.components.SteppedComboBox();
        valueTextBox = new javax.swing.JTextField();
        predicateCombo = new edu.duke.cabig.catrip.gui.components.SteppedComboBox();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(cdeCombo, 0, 379, Short.MAX_VALUE)
                .add(14, 14, 14)
                .add(predicateCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(valueTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(valueTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cdeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(predicateCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(new java.awt.Component[] {cdeCombo, predicateCombo, valueTextBox}, org.jdesktop.layout.GroupLayout.VERTICAL);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cdeCombo;
    private edu.duke.cabig.catrip.gui.components.SteppedComboBox predicateCombo;
    private javax.swing.JTextField valueTextBox;
    // End of variables declaration//GEN-END:variables
    
    private void fillCdeCombo1(){
        getCdeCombo().addItem("ParticipantMedicalIdentifier:  Medical Record Number");
        
        getCdeCombo().addItem("TissueSpecimen: Type");
        getCdeCombo().addItem("TissueSpecimen: Status Activity");
        getCdeCombo().addItem("TissueSpecimen: Quantity Gram");
        getCdeCombo().addItem("TissueSpecimen: Available Quantity Gram");
        getCdeCombo().addItem("TissueSpecimen: Position Dimension Second");
        getCdeCombo().addItem("TissueSpecimen: Position Dimension First");
        
        getCdeCombo().addItem("ClinicalReport: Number Surgical Pathology");
        
        getCdeCombo().addItem("Participant: Genotype Sex");
        getCdeCombo().addItem("Participant: Gender");
        getCdeCombo().addItem("Participant: Race");
        getCdeCombo().addItem("Participant: Ethnic Group");
        getCdeCombo().addItem("Participant: Status Activity");
        
        getCdeCombo().addItem("SpecimenCharacteristics: Tissue Site");
        getCdeCombo().addItem("SpecimenCharacteristics: Side Tissue");
        getCdeCombo().addItem("SpecimenCharacteristics: Pathology Finding Status");
        
        getCdeCombo().addItem("NottinghamHistopathologicGrade: Tubular Pattern");
        getCdeCombo().addItem("NottinghamHistopathologicGrade: Nuclear Pleomorphism");
        getCdeCombo().addItem("NottinghamHistopathologicGrade: Total Nottingham Score");
        getCdeCombo().addItem("NottinghamHistopathologicGrade: Missing Value Reason Total Nottingham Score");
        
        getCdeCombo().addItem("InvasiveBreastCarcinoma: Anatomic Site");
        getCdeCombo().addItem("InvasiveBreastCarcinoma: Anatomic Site Missing Value Reason");
        getCdeCombo().addItem("InvasiveBreastCarcinoma: Angioinvasion Lymphatic Invasion Venous Invasion And/Or");
        getCdeCombo().addItem("InvasiveBreastCarcinoma: Microcalcifications Anatomic Site");
        
        getCdeCombo().addItem("ThreeDimensionalSize: Dimension Largest");
        getCdeCombo().addItem("ThreeDimensionalSize: Dimension Additional First");
        getCdeCombo().addItem("ThreeDimensionalSize: Dimension Second Additional");
        getCdeCombo().addItem("ThreeDimensionalSize: Missing Value Reason");
        
        getCdeCombo().addItem("ParticipantMedicalIdentifier: Medical Record Number");
        
    }
    
    private void fillPredicateCombo(){
        getPredicateCombo().addItem("LIKE");
        getPredicateCombo().addItem("EQUAL_TO");
        getPredicateCombo().addItem("NOT_EQUAL_TO");
        getPredicateCombo().addItem("LESS_THAN");
        getPredicateCombo().addItem("LESS_THAN_EQUAL_TO");
        getPredicateCombo().addItem("GREATER_THAN");
        getPredicateCombo().addItem("GREATER_THAN_EQUAL_TO");
        getPredicateCombo().addItem("IS_NULL");
        getPredicateCombo().addItem("IS_NOT_NULL");
    }
    
    public void fillCdeCombo(List<GraphObject> objs) {
        
        GraphObject obj;
        GraphAssociation assoc;
        
        for (int i=0;i<objs.size();i++) {
            obj = objs.get(i);
            boolean display = obj.isDisplayable();
            if (display){
                System.out.println("XXX : "+obj.getDisplaybleAttributes() + ":" +obj.getRefID());
                String[] displaybleAttributes = obj.getDisplaybleAttributes().split(",");
                ClassBean cBean = DomainModelMetaDataRegistry.lookupClassByRefId(obj.getRefID());
                System.out.println("XX-XX:"+cBean.getFullyQualifiedName());
                cBean.filterAttributes(displaybleAttributes);
                cBean.print();
                ArrayList attributes = cBean.getAttributes();
                
                for (int j = 0; j < attributes.size(); j++) {
                    AttributeBean aBean = (AttributeBean)attributes.get(j);
                    getCdeCombo().addItem(cBean.getCDEName() + "  " +aBean.getCDEName());
//                getCdeCombo().addItem(obj.toString() + "  " +aBean.getCDEName());
                }
                
            }
            
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
