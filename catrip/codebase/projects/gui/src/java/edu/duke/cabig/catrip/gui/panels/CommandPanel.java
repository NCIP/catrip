/*
 * CommandPanel.java
 *
 * Created on May 16, 2006, 2:22 PM
 */

package edu.duke.cabig.catrip.gui.panels;

import caBIG.caGrid.x10.govNihNciCagridDcql.DCQLQueryDocument;
import edu.duke.cabig.catrip.gui.common.AttributeBean;
import edu.duke.cabig.catrip.gui.common.ClassBean;
import edu.duke.cabig.catrip.gui.components.CPanel;
import edu.duke.cabig.catrip.gui.config.GUIConfigurationLoader;
import edu.duke.cabig.catrip.gui.query.DCQLGenerator;
import edu.duke.cabig.catrip.gui.query.DCQLRegistry;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.catrip.fqe.engine.FederatedQueryEngine;
import gov.nih.nci.catrip.fqe.engine.FederatedQueryEngineImpl;
import java.io.File;
import java.io.FileInputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.apache.xmlbeans.XmlOptions;

/**
 *
 * @author  Sanjeev Agarwal
 */
public class CommandPanel extends CPanel {
    
    /** Creates new form CommandPanel */
    public CommandPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        ExecuteCommand = new javax.swing.JButton();

        ExecuteCommand.setText("Execute Query");
        ExecuteCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteCommandActionPerformed(evt);
            }
        });

        add(ExecuteCommand);

    }// </editor-fold>//GEN-END:initComponents
    
    private void ExecuteCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteCommandActionPerformed
        try {
            
            
//            ArrayList ar = new ArrayList(1);
//            ar.add(DCQLRegistry.getTargetNode().getAssociatedClassObject());
//            getMainFrame().getOutputPanel().setResults(ar);
            
            
            
            
//            FileWriter fop = new FileWriter(new File("C:\\tmp\\tmptmp\\aa.xml"), false);
//            fop.write(DCQLGenerator.getDCQLText());
//            fop.close();
            
            FederatedQueryEngine fqe = new FederatedQueryEngineImpl();
            DCQLQueryDocument dcqlQueryDocument = DCQLGenerator.getDCQLDocument();
            
            // print the formatted DCQL first..
//            XmlOptions xmlOptions = new XmlOptions();
//            xmlOptions.setSavePrettyPrint();
//            xmlOptions.setSavePrettyPrintIndent(4);
//            xmlOptions.setUseDefaultNamespace();
//            System.out.println("\n\n ========= Executing this DCQL ================\n");
//            System.out.println(DCQLGenerator.getDCQLText(xmlOptions));
//            System.out.println("\n\n ==============================================\n\n\n\n\n");
            
            // clean the result table before you even try the new query...
            getMainFrame().getOutputPanel().cleanResults();
            
            CQLQueryResults results = fqe.execute(dcqlQueryDocument);
            // TODO -  check if the results are null.. show a dialog..
            if ( (results == null) || (results.getObjectResult() == null) || (results.getObjectResult().length == 0) ){
                JOptionPane.showMessageDialog(getMainFrame(), "No results found. Please check your query.");
            } else {
                // now process results.. to show..
//            System.out.println(results.getObjectResult().length);
                
                // TODO - put the client config fils of the individual service also in the caTRIP-config.xml or the services-mapping file some how...
                CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results, new FileInputStream(new File(GUIConfigurationLoader.getGUIConfiguration().getConfigRootLocation() + File.separator +"qe-client-config.wsdd")));
                
                ArrayList arr = new ArrayList();
                
                ClassBean tObject = DCQLRegistry.getTargetNode().getAssociatedClassObject();
                
                while (iter.hasNext()) {
                    Object dom = iter.next();
                    ClassBean tmp = tObject.clone();
                    
                    ArrayList Atts = tmp.getAttributes();
                    
                    for (int i = 0; i < Atts.size(); i++) {
                        AttributeBean aBean = (AttributeBean) Atts.get(i);
                        String vName = aBean.getAttributeName();
                        String mNaame ="get"+vName.substring(0,1).toUpperCase() + vName.substring(1);
//                    System.out.println("XXXX method is :"+mNaame);
                        String value = "";
                        try{
                            Object vValue = ((Method)dom.getClass().getMethod(mNaame)).invoke(dom);
                            if (vValue != null){
                                value = vValue.toString();
                            }
                        } catch (Exception eex) {}
                        aBean.setAttributeValue(value);
                    }
                    arr.add(tmp);
                }
                
                getMainFrame().getOutputPanel().setResults(arr);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExecuteCommandActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExecuteCommand;
    // End of variables declaration//GEN-END:variables
    
}
