package gov.nih.nci.cagrid.catriptumorregistry.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.catriptumorregistry.stubs.CaTRIPTumorRegistryPortType;
import gov.nih.nci.cagrid.catriptumorregistry.stubs.service.CaTRIPTumorRegistryServiceAddressingLocator;
import gov.nih.nci.cagrid.catriptumorregistry.common.CaTRIPTumorRegistryI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;




import edu.duke.cabig.tumorregistry.domain.Patient;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.data.utilities.*;
import gov.nih.nci.cagrid.cqlquery.Attribute;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlquery.Object;
import gov.nih.nci.cagrid.cqlquery.Predicate;
import gov.nih.nci.cagrid.cqlresultset.*;
import java.io.File;
import java.io.FileInputStream;



/**
 * This class is autogenerated, DO NOT EDIT.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.0
 */
public class CaTRIPTumorRegistryClient extends ServiceSecurityClient implements CaTRIPTumorRegistryI {
    protected CaTRIPTumorRegistryPortType portType;
    private Object portTypeMutex;

    public CaTRIPTumorRegistryClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public CaTRIPTumorRegistryClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url,proxy);
        initialize();
    }

    public CaTRIPTumorRegistryClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr,null);
    }

    public CaTRIPTumorRegistryClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr,proxy);
        initialize();
    }

    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }

    private CaTRIPTumorRegistryPortType createPortType() throws RemoteException {

        CaTRIPTumorRegistryServiceAddressingLocator locator = new CaTRIPTumorRegistryServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        CaTRIPTumorRegistryPortType port = null;
        try {
            port = locator.getCaTRIPTumorRegistryPortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }

    public static void usage(){
        System.out.println(CaTRIPTumorRegistryClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{

                    CaTRIPTumorRegistryClient client = new CaTRIPTumorRegistryClient("http://cagrid2.duhs.duke.edu/wsrf/services/cagrid/CaTRIPTumorRegistry");
                    // place client calls here if you want to use this main as a
                    // test....

                    client.getServiceSecurityMetadata();


                    CQLQuery cqlQuery = new CQLQuery();

                    Object target = new Object();

                    target.setName(Patient.class.getName());//WashU_sanju_baba


                    target.setAttribute(new Attribute("id", Predicate.GREATER_THAN, "1"));

                    cqlQuery.setTarget(target);
                    CQLQueryResults results = client.query(cqlQuery);

                    CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results, new FileInputStream(new File("client-config.wsdd")));
                    while (iter.hasNext()) {
                        Patient de = (Patient) iter.next();
                        System.out.println("Xxxxx  "+de.getClass().getName());
                        System.out.println("Xxxxx  Dep name is:"+de.getFirstName() + ", id: " +de.getId()+"  " + de.getLastName() +"\n" );
                    }

        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
        synchronized(portTypeMutex){
            configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
            return boxedResult.getServiceSecurityMetadata();
        }
    }
    public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
        synchronized(portTypeMutex){
            configureStubSecurity((Stub)portType,"query");
            gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
            gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
            cqlQueryContainer.setCQLQuery(cqlQuery);
            params.setCqlQuery(cqlQueryContainer);
            gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
            return boxedResult.getCQLQueryResultCollection();
        }
    }

}
